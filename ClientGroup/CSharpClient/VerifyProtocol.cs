// Warning: This file is auto-generated by ParseProtocol.exe, you should not change it!
// Time: 2017-03-05 14:31:14
using System;

namespace NetIOLayer
{
    class VerifyProtocolParse
    {
        // Verify msg type: KeyValuePair
        private static void Verify_KeyValuePair()
        {
            KeyValuePair stSrc = new KeyValuePair();
            // Make object rand
            stSrc.key = "test";
            stSrc.value = "test";
            byte[] src_bytes = stSrc.ToBytes();
            MBinaryReader mbr = new MBinaryReader(src_bytes);
            KeyValuePair stDst = new KeyValuePair();
            stDst.FromBytes(mbr);
            // Verify object content 
            // Compare object by bytes 
            byte[] dst_bytes = stDst.ToBytes();
            if ( dst_bytes.Length != src_bytes.Length)
            {
                Console.WriteLine("Failed to verify field: KeyValuePair by bytes length");
            }
            for ( int byte_index = 0; byte_index < dst_bytes.Length; ++byte_index)
            {
                if (src_bytes[byte_index] != dst_bytes[byte_index])
                {
                    Console.WriteLine("Failed to verify field: KeyValuePair by bytes length");
                }
            }
        }

        // Verify msg type: RandString
        private static void Verify_RandString()
        {
            RandString stSrc = new RandString();
            // Make object rand
            stSrc.data = "test";
            byte[] src_bytes = stSrc.ToBytes();
            MBinaryReader mbr = new MBinaryReader(src_bytes);
            RandString stDst = new RandString();
            stDst.FromBytes(mbr);
            // Verify object content 
            // Compare object by bytes 
            byte[] dst_bytes = stDst.ToBytes();
            if ( dst_bytes.Length != src_bytes.Length)
            {
                Console.WriteLine("Failed to verify field: RandString by bytes length");
            }
            for ( int byte_index = 0; byte_index < dst_bytes.Length; ++byte_index)
            {
                if (src_bytes[byte_index] != dst_bytes[byte_index])
                {
                    Console.WriteLine("Failed to verify field: RandString by bytes length");
                }
            }
        }

        // Verify msg type: EchoMsg
        private static void Verify_EchoMsg()
        {
            EchoMsg stSrc = new EchoMsg();
            // Make object rand
            stSrc.protocol_version = "test";
            stSrc.int_param = 76;
            stSrc.char_array = "test";
            byte[] src_bytes = stSrc.ToBytes();
            MBinaryReader mbr = new MBinaryReader(src_bytes);
            EchoMsg stDst = new EchoMsg();
            stDst.FromBytes(mbr);
            // Verify object content 
            if (stSrc.int_param != stDst.int_param)
            {
                Console.WriteLine("Failed to verify field: int_param");
            }
            if (stSrc.enum_value != stDst.enum_value)
            {
                Console.WriteLine("Failed to verify field: enum_value");
            }
            // Compare object by bytes 
            byte[] dst_bytes = stDst.ToBytes();
            if ( dst_bytes.Length != src_bytes.Length)
            {
                Console.WriteLine("Failed to verify field: EchoMsg by bytes length");
            }
            for ( int byte_index = 0; byte_index < dst_bytes.Length; ++byte_index)
            {
                if (src_bytes[byte_index] != dst_bytes[byte_index])
                {
                    Console.WriteLine("Failed to verify field: EchoMsg by bytes length");
                }
            }
        }

        // Verify msg type: ChatMsg
        private static void Verify_ChatMsg()
        {
            ChatMsg stSrc = new ChatMsg();
            // Make object rand
            stSrc.content = "test";
            stSrc.speaker_id = 78;
            stSrc.time = 51;
            byte[] src_bytes = stSrc.ToBytes();
            MBinaryReader mbr = new MBinaryReader(src_bytes);
            ChatMsg stDst = new ChatMsg();
            stDst.FromBytes(mbr);
            // Verify object content 
            if (stSrc.speaker_id != stDst.speaker_id)
            {
                Console.WriteLine("Failed to verify field: speaker_id");
            }
            if (stSrc.time != stDst.time)
            {
                Console.WriteLine("Failed to verify field: time");
            }
            // Compare object by bytes 
            byte[] dst_bytes = stDst.ToBytes();
            if ( dst_bytes.Length != src_bytes.Length)
            {
                Console.WriteLine("Failed to verify field: ChatMsg by bytes length");
            }
            for ( int byte_index = 0; byte_index < dst_bytes.Length; ++byte_index)
            {
                if (src_bytes[byte_index] != dst_bytes[byte_index])
                {
                    Console.WriteLine("Failed to verify field: ChatMsg by bytes length");
                }
            }
        }

        // Verify msg type: CG_HeartBeat_Msg
        private static void Verify_CG_HeartBeat_Msg()
        {
            CG_HeartBeat_Msg stSrc = new CG_HeartBeat_Msg();
            // Make object rand
            stSrc.heartbeat_index = 125;
            byte[] src_bytes = stSrc.ToBytes();
            MBinaryReader mbr = new MBinaryReader(src_bytes);
            CG_HeartBeat_Msg stDst = new CG_HeartBeat_Msg();
            stDst.msg_len = mbr.ReadUInt16();
            stDst.msg_id = mbr.ReadUInt16();
            stDst.FromBytes(mbr);
            // Verify object content 
            if ( stDst.msg_len != CG_HeartBeat_Msg.MSG_LEN )
            {
                Console.WriteLine("Failed to verify field: msg_len");
            }
            if ( stDst.msg_id != CG_HeartBeat_Msg.MSG_ID )
            {
                Console.WriteLine("Failed to verify field: msg_id");
            }
            if (stSrc.heartbeat_index != stDst.heartbeat_index)
            {
                Console.WriteLine("Failed to verify field: heartbeat_index");
            }
            // Compare object by bytes 
            byte[] dst_bytes = stDst.ToBytes();
            if ( dst_bytes.Length != src_bytes.Length)
            {
                Console.WriteLine("Failed to verify field: CG_HeartBeat_Msg by bytes length");
            }
            for ( int byte_index = 0; byte_index < dst_bytes.Length; ++byte_index)
            {
                if (src_bytes[byte_index] != dst_bytes[byte_index])
                {
                    Console.WriteLine("Failed to verify field: CG_HeartBeat_Msg by bytes length");
                }
            }
        }

        // Verify msg type: GC_HeartBeat_Msg
        private static void Verify_GC_HeartBeat_Msg()
        {
            GC_HeartBeat_Msg stSrc = new GC_HeartBeat_Msg();
            // Make object rand
            stSrc.heartbeat_index = 30;
            stSrc.server_utc_time = 32;
            byte[] src_bytes = stSrc.ToBytes();
            MBinaryReader mbr = new MBinaryReader(src_bytes);
            GC_HeartBeat_Msg stDst = new GC_HeartBeat_Msg();
            stDst.msg_len = mbr.ReadUInt16();
            stDst.msg_id = mbr.ReadUInt16();
            stDst.FromBytes(mbr);
            // Verify object content 
            if ( stDst.msg_len != GC_HeartBeat_Msg.MSG_LEN )
            {
                Console.WriteLine("Failed to verify field: msg_len");
            }
            if ( stDst.msg_id != GC_HeartBeat_Msg.MSG_ID )
            {
                Console.WriteLine("Failed to verify field: msg_id");
            }
            if (stSrc.heartbeat_index != stDst.heartbeat_index)
            {
                Console.WriteLine("Failed to verify field: heartbeat_index");
            }
            if (stSrc.server_utc_time != stDst.server_utc_time)
            {
                Console.WriteLine("Failed to verify field: server_utc_time");
            }
            // Compare object by bytes 
            byte[] dst_bytes = stDst.ToBytes();
            if ( dst_bytes.Length != src_bytes.Length)
            {
                Console.WriteLine("Failed to verify field: GC_HeartBeat_Msg by bytes length");
            }
            for ( int byte_index = 0; byte_index < dst_bytes.Length; ++byte_index)
            {
                if (src_bytes[byte_index] != dst_bytes[byte_index])
                {
                    Console.WriteLine("Failed to verify field: GC_HeartBeat_Msg by bytes length");
                }
            }
        }

        // Verify msg type: CG_Echo_Request
        private static void Verify_CG_Echo_Request()
        {
            CG_Echo_Request stSrc = new CG_Echo_Request();
            // Make object rand
            byte[] src_bytes = stSrc.ToBytes();
            MBinaryReader mbr = new MBinaryReader(src_bytes);
            CG_Echo_Request stDst = new CG_Echo_Request();
            stDst.msg_len = mbr.ReadUInt16();
            stDst.msg_id = mbr.ReadUInt16();
            stDst.FromBytes(mbr);
            // Verify object content 
            if ( stDst.msg_len != CG_Echo_Request.MSG_LEN )
            {
                Console.WriteLine("Failed to verify field: msg_len");
            }
            if ( stDst.msg_id != CG_Echo_Request.MSG_ID )
            {
                Console.WriteLine("Failed to verify field: msg_id");
            }
            // Compare object by bytes 
            byte[] dst_bytes = stDst.ToBytes();
            if ( dst_bytes.Length != src_bytes.Length)
            {
                Console.WriteLine("Failed to verify field: CG_Echo_Request by bytes length");
            }
            for ( int byte_index = 0; byte_index < dst_bytes.Length; ++byte_index)
            {
                if (src_bytes[byte_index] != dst_bytes[byte_index])
                {
                    Console.WriteLine("Failed to verify field: CG_Echo_Request by bytes length");
                }
            }
        }

        // Verify msg type: GC_Echo_Response
        private static void Verify_GC_Echo_Response()
        {
            GC_Echo_Response stSrc = new GC_Echo_Response();
            // Make object rand
            byte[] src_bytes = stSrc.ToBytes();
            MBinaryReader mbr = new MBinaryReader(src_bytes);
            GC_Echo_Response stDst = new GC_Echo_Response();
            stDst.msg_len = mbr.ReadUInt16();
            stDst.msg_id = mbr.ReadUInt16();
            stDst.FromBytes(mbr);
            // Verify object content 
            if ( stDst.msg_len != GC_Echo_Response.MSG_LEN )
            {
                Console.WriteLine("Failed to verify field: msg_len");
            }
            if ( stDst.msg_id != GC_Echo_Response.MSG_ID )
            {
                Console.WriteLine("Failed to verify field: msg_id");
            }
            if (stSrc.response_code != stDst.response_code)
            {
                Console.WriteLine("Failed to verify field: response_code");
            }
            // Compare object by bytes 
            byte[] dst_bytes = stDst.ToBytes();
            if ( dst_bytes.Length != src_bytes.Length)
            {
                Console.WriteLine("Failed to verify field: GC_Echo_Response by bytes length");
            }
            for ( int byte_index = 0; byte_index < dst_bytes.Length; ++byte_index)
            {
                if (src_bytes[byte_index] != dst_bytes[byte_index])
                {
                    Console.WriteLine("Failed to verify field: GC_Echo_Response by bytes length");
                }
            }
        }

        // Verify msg type: CG_Chat_Cmd
        private static void Verify_CG_Chat_Cmd()
        {
            CG_Chat_Cmd stSrc = new CG_Chat_Cmd();
            // Make object rand
            byte[] src_bytes = stSrc.ToBytes();
            MBinaryReader mbr = new MBinaryReader(src_bytes);
            CG_Chat_Cmd stDst = new CG_Chat_Cmd();
            stDst.msg_len = mbr.ReadUInt16();
            stDst.msg_id = mbr.ReadUInt16();
            stDst.FromBytes(mbr);
            // Verify object content 
            if ( stDst.msg_len != CG_Chat_Cmd.MSG_LEN )
            {
                Console.WriteLine("Failed to verify field: msg_len");
            }
            if ( stDst.msg_id != CG_Chat_Cmd.MSG_ID )
            {
                Console.WriteLine("Failed to verify field: msg_id");
            }
            // Compare object by bytes 
            byte[] dst_bytes = stDst.ToBytes();
            if ( dst_bytes.Length != src_bytes.Length)
            {
                Console.WriteLine("Failed to verify field: CG_Chat_Cmd by bytes length");
            }
            for ( int byte_index = 0; byte_index < dst_bytes.Length; ++byte_index)
            {
                if (src_bytes[byte_index] != dst_bytes[byte_index])
                {
                    Console.WriteLine("Failed to verify field: CG_Chat_Cmd by bytes length");
                }
            }
        }

        // Verify msg type: GC_Chat_Msg
        private static void Verify_GC_Chat_Msg()
        {
            GC_Chat_Msg stSrc = new GC_Chat_Msg();
            // Make object rand
            byte[] src_bytes = stSrc.ToBytes();
            MBinaryReader mbr = new MBinaryReader(src_bytes);
            GC_Chat_Msg stDst = new GC_Chat_Msg();
            stDst.msg_len = mbr.ReadUInt16();
            stDst.msg_id = mbr.ReadUInt16();
            stDst.FromBytes(mbr);
            // Verify object content 
            if ( stDst.msg_len != GC_Chat_Msg.MSG_LEN )
            {
                Console.WriteLine("Failed to verify field: msg_len");
            }
            if ( stDst.msg_id != GC_Chat_Msg.MSG_ID )
            {
                Console.WriteLine("Failed to verify field: msg_id");
            }
            // Compare object by bytes 
            byte[] dst_bytes = stDst.ToBytes();
            if ( dst_bytes.Length != src_bytes.Length)
            {
                Console.WriteLine("Failed to verify field: GC_Chat_Msg by bytes length");
            }
            for ( int byte_index = 0; byte_index < dst_bytes.Length; ++byte_index)
            {
                if (src_bytes[byte_index] != dst_bytes[byte_index])
                {
                    Console.WriteLine("Failed to verify field: GC_Chat_Msg by bytes length");
                }
            }
        }

        // Run verify function 
        public static void RunTest()
        {
            Verify_KeyValuePair();
            Verify_RandString();
            Verify_EchoMsg();
            Verify_ChatMsg();
            Verify_CG_HeartBeat_Msg();
            Verify_GC_HeartBeat_Msg();
            Verify_CG_Echo_Request();
            Verify_GC_Echo_Response();
            Verify_CG_Chat_Cmd();
            Verify_GC_Chat_Msg();
        }
    }
}
