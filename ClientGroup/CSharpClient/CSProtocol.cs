// Warning: This file is auto-generated by ParseProtocol.exe, you should not change it!
// Time: 2017-03-05 14:31:14
using System;
using System.Text;
using System.Security.Cryptography;
using AINT8 = System.SByte;
using AUINT8 = System.Byte;
using AINT16 = System.Int16;
using AUINT16 = System.UInt16;
using AINT32 = System.Int32;
using AUINT32 = System.UInt32;
using AINT64 = System.Int64;
using AUINT64 = System.UInt64;

namespace NetIOLayer
{
    // Base class of net message
    public abstract class Message
    {
        public static string AQUARIUS_PROTOCOL_VERSION = "20170305T143114";
        public static int MSG_BASIC_LEN = 2;
        public AUINT16 msg_len;
        public AUINT16 msg_id;
        public abstract byte[] ToBytes();
        public abstract bool FromBytes( MBinaryReader mbr );
    }

    // Key value pair for huge param. [size: 482 ]
    public class KeyValuePair
    {
        // Msg id of KeyValuePair, dec value: 0
        public const AUINT16 MSG_LEN = 482;
        // Constructor
        public KeyValuePair()
        {
            key = "";
            value = "";
        }

        // key
        private static AUINT16 key_size = 32;
        public string key;
        // value
        private static AUINT16 value_size = 450;
        public string value;
        // Write msg to output stream
        public byte[] ToBytes()
        {
            MBinaryWriter mbw = new MBinaryWriter();
            mbw.WriteString( key, key_size );
            mbw.WriteString( value, value_size );
            byte[] KeyValuePair_bytes = mbw.ToArray();
            mbw.Close();
            mbw = null;
            // Verify the length of msg 
            if ( KeyValuePair_bytes.Length != 482 ) 
            {
                Console.WriteLine("Invalid msg len, expect:482, real:KeyValuePair_bytes.Length");
                return null;
            }
            return KeyValuePair_bytes;
        }
        // Read msg to input stream
        public bool FromBytes( MBinaryReader mbr )
        {
            // Skip msg_id and msg_len as it has been read by outside.
            key = mbr.ReadString( key_size );
            value = mbr.ReadString( value_size );
            return true;
        }
    }

    // rand string value. [size: 32 ]
    public class RandString
    {
        // Msg id of RandString, dec value: 0
        public const AUINT16 MSG_LEN = 32;
        // Constructor
        public RandString()
        {
            data = "";
        }

        // rand string
        private static AUINT16 data_size = 32;
        public string data;
        // Write msg to output stream
        public byte[] ToBytes()
        {
            MBinaryWriter mbw = new MBinaryWriter();
            mbw.WriteString( data, data_size );
            byte[] RandString_bytes = mbw.ToArray();
            mbw.Close();
            mbw = null;
            // Verify the length of msg 
            if ( RandString_bytes.Length != 32 ) 
            {
                Console.WriteLine("Invalid msg len, expect:32, real:RandString_bytes.Length");
                return null;
            }
            return RandString_bytes;
        }
        // Read msg to input stream
        public bool FromBytes( MBinaryReader mbr )
        {
            // Skip msg_id and msg_len as it has been read by outside.
            data = mbr.ReadString( data_size );
            return true;
        }
    }

    // enum: response code enum value
    public enum EResponseCode : short
    {
        // invalid
        Invalid = -1,
        // success
        G_Success = 0,
        // system error
        G_SystemError = 1,
        // parameter is invalid
        G_InvalidParam = 3,
    }

    // echo msg, which can't bigger than 512byte. [size: 270 ]
    public class EchoMsg
    {
        // Msg id of EchoMsg, dec value: 0
        public const AUINT16 MSG_LEN = 270;
        // Constructor
        public EchoMsg()
        {
            protocol_version = "";
            int_param = 0;
            int_array = new AUINT32[ int_array_size ];
            char_array = "";
            rand_string_field = new RandString();
            rand_string_array = new RandString[ rand_string_array_size ];
            for (int element_index = 0; element_index < rand_string_array.Length; ++element_index)
            {
                 rand_string_array[element_index] = new RandString();
            }
            enum_value = (EResponseCode) 0;
        }

        // protocol version
        private static AUINT16 protocol_version_size = 32;
        public string protocol_version;
        // single field, available type: AUINT32, AINT32, AUINT16, AINT16, AUINT8, AINT8
        public AUINT32 int_param;
        // array param, you can change element_count to set array size
        private static AUINT16 int_array_size = 10;
        public AUINT32[] int_array;
        // char array, hold string value
        private static AUINT16 char_array_size = 32;
        public string char_array;
        // rand string field, the type can be pre-define struct
        public RandString rand_string_field;
        // rand struct array
        private static AUINT16 rand_string_array_size = 4;
        public RandString[] rand_string_array;
        // enum value
        public EResponseCode enum_value;
        // Write msg to output stream
        public byte[] ToBytes()
        {
            MBinaryWriter mbw = new MBinaryWriter();
            mbw.WriteString( protocol_version, protocol_version_size );
            mbw.Write( int_param);
            for (Int32 nElementIndex = 0; nElementIndex < int_array_size; ++nElementIndex)
            {
                mbw.Write( int_array[nElementIndex]);
            }
            mbw.WriteString( char_array, char_array_size );
            byte[] rand_string_field_bytes = rand_string_field.ToBytes();
            mbw.Write( rand_string_field_bytes );
            for (Int32 nElementIndex = 0; nElementIndex < rand_string_array_size; ++nElementIndex)
            {
                byte[] rand_string_array_bytes = rand_string_array[nElementIndex].ToBytes();
                mbw.Write( rand_string_array_bytes);
            }
            mbw.Write( (Int16)enum_value);
            byte[] EchoMsg_bytes = mbw.ToArray();
            mbw.Close();
            mbw = null;
            // Verify the length of msg 
            if ( EchoMsg_bytes.Length != 270 ) 
            {
                Console.WriteLine("Invalid msg len, expect:270, real:EchoMsg_bytes.Length");
                return null;
            }
            return EchoMsg_bytes;
        }
        // Read msg to input stream
        public bool FromBytes( MBinaryReader mbr )
        {
            // Skip msg_id and msg_len as it has been read by outside.
            protocol_version = mbr.ReadString( protocol_version_size );
            int_param = mbr.ReadUInt32();
            for (Int32 nElementIndex = 0; nElementIndex < int_array_size; ++nElementIndex)
            {
                int_array[nElementIndex] = mbr.ReadUInt32();
            }
            char_array = mbr.ReadString( char_array_size );
            rand_string_field.FromBytes(mbr);
            for (Int32 nElementIndex = 0; nElementIndex < rand_string_array_size; ++nElementIndex)
            {
                rand_string_array[nElementIndex].FromBytes(mbr);
            }
            enum_value = (EResponseCode)mbr.ReadInt16();
            return true;
        }
    }

    // chat msg. [size: 264 ]
    public class ChatMsg
    {
        // Msg id of ChatMsg, dec value: 0
        public const AUINT16 MSG_LEN = 264;
        // Constructor
        public ChatMsg()
        {
            content = "";
            speaker_id = 0;
            time = 0;
        }

        // chat content
        private static AUINT16 content_size = 256;
        public string content;
        // speaker id
        public AUINT32 speaker_id;
        // time
        public AUINT32 time;
        // Write msg to output stream
        public byte[] ToBytes()
        {
            MBinaryWriter mbw = new MBinaryWriter();
            mbw.WriteString( content, content_size );
            mbw.Write( speaker_id);
            mbw.Write( time);
            byte[] ChatMsg_bytes = mbw.ToArray();
            mbw.Close();
            mbw = null;
            // Verify the length of msg 
            if ( ChatMsg_bytes.Length != 264 ) 
            {
                Console.WriteLine("Invalid msg len, expect:264, real:ChatMsg_bytes.Length");
                return null;
            }
            return ChatMsg_bytes;
        }
        // Read msg to input stream
        public bool FromBytes( MBinaryReader mbr )
        {
            // Skip msg_id and msg_len as it has been read by outside.
            content = mbr.ReadString( content_size );
            speaker_id = mbr.ReadUInt32();
            time = mbr.ReadUInt32();
            return true;
        }
    }

    // heart beat package. [size: 6 ]
    public class CG_HeartBeat_Msg : Message
    {
        // Msg id of CG_HeartBeat_Msg, dec value: 16340
        public const AUINT16 MSG_LEN = 6;
        public const AUINT16 MSG_ID = 0X3FD4;
        // Constructor
        public CG_HeartBeat_Msg()
        {
            msg_len = MSG_LEN;
            msg_id = MSG_ID;
            heartbeat_index = 0;
        }

        // index of heart beat
        public AUINT16 heartbeat_index;
        // Write msg to output stream
        public override byte[] ToBytes()
        {
            MBinaryWriter mbw = new MBinaryWriter();
            mbw.Write( msg_len);
            mbw.Write( msg_id);
            mbw.Write( heartbeat_index);
            byte[] CG_HeartBeat_Msg_bytes = mbw.ToArray();
            mbw.Close();
            mbw = null;
            // Verify the length of msg 
            if ( CG_HeartBeat_Msg_bytes.Length != 6 ) 
            {
                Console.WriteLine("Invalid msg len, expect:6, real:CG_HeartBeat_Msg_bytes.Length");
                return null;
            }
            return CG_HeartBeat_Msg_bytes;
        }
        // Read msg to input stream
        public override bool FromBytes( MBinaryReader mbr )
        {
            // Skip msg_id and msg_len as it has been read by outside.
            heartbeat_index = mbr.ReadUInt16();
            if (msg_id != MSG_ID)
            {
                Console.WriteLine("Invalid msg id when parse msg type [CG_HeartBeat_Msg], expect:[16340], real:[" + msg_id + "]");
                return false;
            }
            if (msg_len != MSG_LEN)
            {
                Console.WriteLine("Invalid msg len when parse msg type [CG_HeartBeat_Msg], expect:[6], real:[" + msg_len + "]");
                return false;
            }
            return true;
        }
    }

    // heart beat package. [size: 10 ]
    public class GC_HeartBeat_Msg : Message
    {
        // Msg id of GC_HeartBeat_Msg, dec value: 9546
        public const AUINT16 MSG_LEN = 10;
        public const AUINT16 MSG_ID = 0X254A;
        // Constructor
        public GC_HeartBeat_Msg()
        {
            msg_len = MSG_LEN;
            msg_id = MSG_ID;
            heartbeat_index = 0;
            server_utc_time = 0;
        }

        // index of heart beat
        public AUINT16 heartbeat_index;
        // server utc time
        public AUINT32 server_utc_time;
        // Write msg to output stream
        public override byte[] ToBytes()
        {
            MBinaryWriter mbw = new MBinaryWriter();
            mbw.Write( msg_len);
            mbw.Write( msg_id);
            mbw.Write( heartbeat_index);
            mbw.Write( server_utc_time);
            byte[] GC_HeartBeat_Msg_bytes = mbw.ToArray();
            mbw.Close();
            mbw = null;
            // Verify the length of msg 
            if ( GC_HeartBeat_Msg_bytes.Length != 10 ) 
            {
                Console.WriteLine("Invalid msg len, expect:10, real:GC_HeartBeat_Msg_bytes.Length");
                return null;
            }
            return GC_HeartBeat_Msg_bytes;
        }
        // Read msg to input stream
        public override bool FromBytes( MBinaryReader mbr )
        {
            // Skip msg_id and msg_len as it has been read by outside.
            heartbeat_index = mbr.ReadUInt16();
            server_utc_time = mbr.ReadUInt32();
            if (msg_id != MSG_ID)
            {
                Console.WriteLine("Invalid msg id when parse msg type [GC_HeartBeat_Msg], expect:[9546], real:[" + msg_id + "]");
                return false;
            }
            if (msg_len != MSG_LEN)
            {
                Console.WriteLine("Invalid msg len when parse msg type [GC_HeartBeat_Msg], expect:[10], real:[" + msg_len + "]");
                return false;
            }
            return true;
        }
    }

    // common struct request. [size: 274 ]
    public class CG_Echo_Request : Message
    {
        // Msg id of CG_Echo_Request, dec value: 17250
        public const AUINT16 MSG_LEN = 274;
        public const AUINT16 MSG_ID = 0X4362;
        // Constructor
        public CG_Echo_Request()
        {
            msg_len = MSG_LEN;
            msg_id = MSG_ID;
            data = new EchoMsg();
        }

        // msg field
        public EchoMsg data;
        // Write msg to output stream
        public override byte[] ToBytes()
        {
            MBinaryWriter mbw = new MBinaryWriter();
            mbw.Write( msg_len);
            mbw.Write( msg_id);
            byte[] data_bytes = data.ToBytes();
            mbw.Write( data_bytes );
            byte[] CG_Echo_Request_bytes = mbw.ToArray();
            mbw.Close();
            mbw = null;
            // Verify the length of msg 
            if ( CG_Echo_Request_bytes.Length != 274 ) 
            {
                Console.WriteLine("Invalid msg len, expect:274, real:CG_Echo_Request_bytes.Length");
                return null;
            }
            return CG_Echo_Request_bytes;
        }
        // Read msg to input stream
        public override bool FromBytes( MBinaryReader mbr )
        {
            // Skip msg_id and msg_len as it has been read by outside.
            data.FromBytes(mbr);
            if (msg_id != MSG_ID)
            {
                Console.WriteLine("Invalid msg id when parse msg type [CG_Echo_Request], expect:[17250], real:[" + msg_id + "]");
                return false;
            }
            if (msg_len != MSG_LEN)
            {
                Console.WriteLine("Invalid msg len when parse msg type [CG_Echo_Request], expect:[274], real:[" + msg_len + "]");
                return false;
            }
            return true;
        }
    }

    // common struct response. [size: 276 ]
    public class GC_Echo_Response : Message
    {
        // Msg id of GC_Echo_Response, dec value: 16542
        public const AUINT16 MSG_LEN = 276;
        public const AUINT16 MSG_ID = 0X409E;
        // Constructor
        public GC_Echo_Response()
        {
            msg_len = MSG_LEN;
            msg_id = MSG_ID;
            data = new EchoMsg();
            response_code = (EResponseCode) 0;
        }

        // msg field
        public EchoMsg data;
        // ResponseCode
        public EResponseCode response_code;
        // Write msg to output stream
        public override byte[] ToBytes()
        {
            MBinaryWriter mbw = new MBinaryWriter();
            mbw.Write( msg_len);
            mbw.Write( msg_id);
            byte[] data_bytes = data.ToBytes();
            mbw.Write( data_bytes );
            mbw.Write( (Int16)response_code);
            byte[] GC_Echo_Response_bytes = mbw.ToArray();
            mbw.Close();
            mbw = null;
            // Verify the length of msg 
            if ( GC_Echo_Response_bytes.Length != 276 ) 
            {
                Console.WriteLine("Invalid msg len, expect:276, real:GC_Echo_Response_bytes.Length");
                return null;
            }
            return GC_Echo_Response_bytes;
        }
        // Read msg to input stream
        public override bool FromBytes( MBinaryReader mbr )
        {
            // Skip msg_id and msg_len as it has been read by outside.
            data.FromBytes(mbr);
            response_code = (EResponseCode)mbr.ReadInt16();
            if (msg_id != MSG_ID)
            {
                Console.WriteLine("Invalid msg id when parse msg type [GC_Echo_Response], expect:[16542], real:[" + msg_id + "]");
                return false;
            }
            if (msg_len != MSG_LEN)
            {
                Console.WriteLine("Invalid msg len when parse msg type [GC_Echo_Response], expect:[276], real:[" + msg_len + "]");
                return false;
            }
            return true;
        }
    }

    // send chat cmd to server. [size: 268 ]
    public class CG_Chat_Cmd : Message
    {
        // Msg id of CG_Chat_Cmd, dec value: 9461
        public const AUINT16 MSG_LEN = 268;
        public const AUINT16 MSG_ID = 0X24F5;
        // Constructor
        public CG_Chat_Cmd()
        {
            msg_len = MSG_LEN;
            msg_id = MSG_ID;
            data = new ChatMsg();
        }

        // msg field
        public ChatMsg data;
        // Write msg to output stream
        public override byte[] ToBytes()
        {
            MBinaryWriter mbw = new MBinaryWriter();
            mbw.Write( msg_len);
            mbw.Write( msg_id);
            byte[] data_bytes = data.ToBytes();
            mbw.Write( data_bytes );
            byte[] CG_Chat_Cmd_bytes = mbw.ToArray();
            mbw.Close();
            mbw = null;
            // Verify the length of msg 
            if ( CG_Chat_Cmd_bytes.Length != 268 ) 
            {
                Console.WriteLine("Invalid msg len, expect:268, real:CG_Chat_Cmd_bytes.Length");
                return null;
            }
            return CG_Chat_Cmd_bytes;
        }
        // Read msg to input stream
        public override bool FromBytes( MBinaryReader mbr )
        {
            // Skip msg_id and msg_len as it has been read by outside.
            data.FromBytes(mbr);
            if (msg_id != MSG_ID)
            {
                Console.WriteLine("Invalid msg id when parse msg type [CG_Chat_Cmd], expect:[9461], real:[" + msg_id + "]");
                return false;
            }
            if (msg_len != MSG_LEN)
            {
                Console.WriteLine("Invalid msg len when parse msg type [CG_Chat_Cmd], expect:[268], real:[" + msg_len + "]");
                return false;
            }
            return true;
        }
    }

    // send chat msg to client. [size: 268 ]
    public class GC_Chat_Msg : Message
    {
        // Msg id of GC_Chat_Msg, dec value: 17881
        public const AUINT16 MSG_LEN = 268;
        public const AUINT16 MSG_ID = 0X45D9;
        // Constructor
        public GC_Chat_Msg()
        {
            msg_len = MSG_LEN;
            msg_id = MSG_ID;
            data = new ChatMsg();
        }

        // chat content
        public ChatMsg data;
        // Write msg to output stream
        public override byte[] ToBytes()
        {
            MBinaryWriter mbw = new MBinaryWriter();
            mbw.Write( msg_len);
            mbw.Write( msg_id);
            byte[] data_bytes = data.ToBytes();
            mbw.Write( data_bytes );
            byte[] GC_Chat_Msg_bytes = mbw.ToArray();
            mbw.Close();
            mbw = null;
            // Verify the length of msg 
            if ( GC_Chat_Msg_bytes.Length != 268 ) 
            {
                Console.WriteLine("Invalid msg len, expect:268, real:GC_Chat_Msg_bytes.Length");
                return null;
            }
            return GC_Chat_Msg_bytes;
        }
        // Read msg to input stream
        public override bool FromBytes( MBinaryReader mbr )
        {
            // Skip msg_id and msg_len as it has been read by outside.
            data.FromBytes(mbr);
            if (msg_id != MSG_ID)
            {
                Console.WriteLine("Invalid msg id when parse msg type [GC_Chat_Msg], expect:[17881], real:[" + msg_id + "]");
                return false;
            }
            if (msg_len != MSG_LEN)
            {
                Console.WriteLine("Invalid msg len when parse msg type [GC_Chat_Msg], expect:[268], real:[" + msg_len + "]");
                return false;
            }
            return true;
        }
    }

    // Message factory class
    public class MessageFactory
    {
        public static Message CreateMessageById(AUINT16 nMsgId)
        {
            Message msg = null;
            switch(nMsgId)
            {
            case CG_HeartBeat_Msg.MSG_ID:
                msg = new CG_HeartBeat_Msg();
                break;
            case GC_HeartBeat_Msg.MSG_ID:
                msg = new GC_HeartBeat_Msg();
                break;
            case CG_Echo_Request.MSG_ID:
                msg = new CG_Echo_Request();
                break;
            case GC_Echo_Response.MSG_ID:
                msg = new GC_Echo_Response();
                break;
            case CG_Chat_Cmd.MSG_ID:
                msg = new CG_Chat_Cmd();
                break;
            case GC_Chat_Msg.MSG_ID:
                msg = new GC_Chat_Msg();
                break;
            default:
                Console.WriteLine("Invalid msg id:" + nMsgId);
                break;
            }
            return msg;
        }
    }

}
